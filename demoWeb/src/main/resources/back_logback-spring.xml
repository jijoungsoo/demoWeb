<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">



  <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- rollover daily -->
      <fileNamePattern>log/apilog-%d{yyyy-MM-dd}.%i.txt.zip</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- or whenever the file size reaches 100MB -->
        <maxFileSize>100MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
    <encoder>
      <pattern>%d{HH:mm:ss.SSS}-%green(%-5level)-%logger{36} - %msg%n</pattern>
    </encoder>
  </appender>

  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <layout class="ch.qos.logback.classic.PatternLayout">
    <!--  로그 출력정보 https://goddaehee.tistory.com/206 -->
      <Pattern>%d{HH:mm:ss.SSS}-%green(%-5level)-%logger{36} - %msg%n</Pattern>
    </layout>
  </appender>


  <appender name="FLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- rollover daily -->
      <fileNamePattern>flonetd/flog-%d{yyyy-MM-dd}.txt.zip</fileNamePattern>

    </rollingPolicy>
    <encoder>

      <pattern>%5p [%d] %msg%n</pattern>
    </encoder>
  </appender>


  <!-- Loggers -->
  <logger name="org.springframework.core">
    <level value="info"/>

  </logger>
  <logger name="org.springframework.beans">
    <level value="info"/>

  </logger>
  <logger name="org.springframework.context">
    <level value="info"/>

  </logger>
  <logger name="org.springframework.web">
    <level value="info"/>

  </logger>
  <logger name="com.example.web">
    <level value="debug"/>

  </logger>
  <logger name="java.sql">
    <appender-ref ref="ROLLING"/>
    <appender-ref ref="STDOUT"/>
    <level value="info"/>

  </logger>


  <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
  <logger name="jdbc.sqlonly" additivity="false">
    <appender-ref ref="ROLLING"/>
    <appender-ref ref="STDOUT"/>
    <level value="info"/>


  </logger>
  <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
  <logger name="jdbc.sqltiming" additivity="false">
    <!--<appender-ref ref="ROLLING"/>-->
    <!--<appender-ref ref="STDOUT"/>-->
    <!--<level value="info"/>-->
  </logger>
  <logger name="jdbc.resultset" additivity="false">
    <!--<appender-ref ref="ROLLING"/>-->
    <!--<appender-ref ref="STDOUT"/>-->
    <!--<level value="info"/>-->

  </logger>
  <logger name="jdbc.resultsettable" additivity="false">
    <appender-ref ref="ROLLING"/>
    <appender-ref ref="STDOUT"/>
    <level value="debug"/>

  </logger>
  <logger name="jdbc.connection" additivity="false">
    <appender-ref ref="ROLLING"/>
    <level value="fetal"/>
  </logger>
  <logger name="jdbc.audit" additivity="false">
    <!--<appender-ref ref="ROLLING"/>-->
    <!--<appender-ref ref="STDOUT"/>-->
    <!--<level value="info"/>-->
  </logger>

  <logger name="flunetd"  additivity="false" >
    <appender-ref ref="FLOG"/>


    <level value="info"/>
  </logger>

  <root level="info">
    <appender-ref ref="ROLLING"/>
    <appender-ref ref="STDOUT"/>
  </root>
  
  <logger name="org.zalando.logbook" level="TRACE" additivity="false">
  <appender-ref ref="DB"/>
  </logger>
  
  
  <!-- https://handcoding.tistory.com/135?category=621284
  https://mklove2016.tistory.com/11
  
  이걸로 저장해서 하나 만드는게 맞는 것 같다.
  https://medium.com/@chakrar27/store-log-data-into-user-defined-table-using-logback-db-appender-685e4c3a045a
  https://bryan7.tistory.com/406 
   https://jeong-pro.tistory.com/199
   
   In the logback-classic/1.2.3/ source package ch/qos/logback/classic/db/script/mysql.sql
   
 db저장 
    <appender name="db" class="com.t.hc.beans.CustomJDBCAppender">
		<encoder>
      		<pattern>%d{HH:mm:ss.SSS}-%green(%-5level)-%logger{36} - %msg%n</pattern>
    	</encoder>
    </appender>
   
   

	logback에 있는 db append를 쓰자.   
   https://cnpnote.tistory.com/entry/SPRING-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EB%A1%9C%EA%B7%B8%EB%B0%B1-DB-%EC%95%A0-%ED%8D%BC%EB%8D%94-%EC%86%8D%EC%84%B1
   --> 
  
  
	<!-- 출처: https://devtzu.tistory.com/55 [Dev Tzu] -->
    <springProperty name="driverClass" source="spring.datasource.driver-class-name"/>
    <springProperty name="url" source="spring.datasource.url"/>
    <springProperty name="user" source="spring.datasource.username"/>
    <springProperty name="password" source="spring.datasource.password"/>
    
    <appender name="DB" class="com.test.package.util.logback.LogDBAppender">
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <driverClass>${driverClass}</driverClass>
            <url>${url}</url>
            <user>${user}</user>
            <password>${password}</password>
        </connectionSource>
    </appender>
    
    <!-- https://www.lesstif.com/java/lilith-logback-log-message-network-20774961.html
    네트워크 쓰는 예제.
    <appender name="LogbackClassic" class="ch.qos.logback.classic.net.SocketAppender">
    <RemoteHost>localhost</RemoteHost>
    <Port>4560</Port>
    <ReconnectionDelay>170</ReconnectionDelay>
    <IncludeCallerData>true</IncludeCallerData>
</appender>
     -->
     <!-- 
     http://www.nextree.co.kr/p5584/
     
     private static Logger logger = LoggerFactory.getLogger("MLS_LOGGER");  
     api로그만 남기면 되니까..!!
      -->
    <appender name="SOCKET" class="co.qos.logback.classic.net.SocketAppender">  
		    <RemoteHost>${logserver.host}</RemoteHost>
		    <Port>${logserver.port}</Port>
		    <reconnectionDelay>10000</reconnectionDelay>
		    <includeCallerData>false</includeCallerData>
	</appender>
		
	<logger name="MLS_LOGGER" level="INFO">  
	    <appender-ref ref="SOCKET" />
	</logger>  
     
</configuration>

